version: "3"

services:

# Orion is the context broker
    orion:
        image: fiware/orion:2.2.0
        hostname: orion
        container_name: fiware-orion
        depends_on:
          - mongo-db
        networks:
          - default
        expose:
          - "1026"
        ports:
          - "1026:1026"
        command: -dbhost mongo-db -logLevel DEBUG
        healthcheck:
          test: curl --fail -s http://orion:1026/version || exit 1
    
    # IoT-Agent is configured for the UltraLight Protocol
    iot-agent:
        image: fiware/iotagent-ul:1.8.0
        hostname: iot-agent
        container_name: fiware-iot-agent
        depends_on:
          - mongo-db
          - mosquitto
        networks:
          - default
        expose:
          - "4041"
          - "7896"
        ports:
          - "4041:4041"
          - "7896:7896"
        environment:
            - IOTA_CB_HOST=orion # name of the context broker to update context
            - IOTA_CB_PORT=1026 # port the context broker listens on to update context
            - IOTA_NORTH_PORT=4041
            - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
            - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
            - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
            - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
            - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
            - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
            - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
            - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
            - IOTA_MQTT_HOST=mosquitto # The host name of the MQTT Broker
            - IOTA_MQTT_PORT=1883 # The port the MQTT Broker is listening on to receive topics
            - IOTA_HTTP_PORT=7896 # The port used for device traffic over HTTP
            - IOTA_PROVIDER_URL=http://iot-agent:4041
        healthcheck:
            test: curl --fail -s http://iot-agent:4041/iot/about || exit 1
    
   
        
    # Databases
    mongo-db:
        image: mongo:3.6
        hostname: mongo-db
        container_name: db-mongo
        expose:
          - "27017"
        ports:
          - "27017:27017"
        networks:
          - default
        deploy:
              replicas: 1
              restart_policy:
                  condition: on-failure
        command: --bind_ip_all --smallfiles
        volumes:
          - mongo-db:/data
    
    
    
    mosquitto:
        image: eclipse-mosquitto
        hostname: mosquitto
        container_name: mosquitto
        expose:
            - "1883"
            - "9001"
        ports:
            - "1883:1883"
            - "9001:9001"
        volumes:
            - ./mosquitto/mosquitto.conf:/mosquitto/config1/mosquitto.conf
        networks:
            - default

    tutorial:
        image: fiware/tutorials.context-provider
        hostname: tutorial
        container_name: fiware-tutorial
        depends_on:
          - orion
          - iot-agent
        networks:
          default:
            aliases:
              - iot-sensors
              - context-provider
        expose:
          - "4000"
          - "4001"
        ports:
          - "4000:4000"
          - "4001:4001"
        environment:
          - "DEBUG=tutorial:*"
          - "WEB_APP_PORT=4000" # Port used by the content provider proxy and web-app for viewing data
          - "IOTA_HTTP_HOST=iot-agent"
          - "IOTA_HTTP_PORT=7896"
          - "DUMMY_DEVICES_PORT=4001" # Port used by the dummy IOT devices to receive commands
          - "DUMMY_DEVICES_TRANSPORT=MQTT" # Default transport used by dummy IoT devices
          - "DUMMY_DEVICES_API_KEY=4jggokgpepnvsb2uv4s40d59ov"
          - "CONTEXT_BROKER=http://orion:1026/v2" # URL of the context broker to update context
          - "MQTT_BROKER_URL=mqtt://mosquitto"
          - "OPENWEATHERMAP_KEY_ID=<ADD_YOUR_KEY_ID>"
          - "TWITTER_CONSUMER_KEY=<ADD_YOUR_CONSUMER_KEY>"
          - "TWITTER_CONSUMER_SECRET=<ADD_YOUR_CONSUMER_SECRET>"
        healthcheck:
          test: curl --fail -s http://tutorial:4000/version || exit 1
            

# For WIrecloud ngsiproxy, nginx, postgres, memcached, elasticsearch, wirecloud images are required            
    ngsiproxy:
        container_name: ngsiproxy
        restart: always
        image: fiware/ngsiproxy:latest
        networks:
          - default
        hostname: ngsiproxy
        ports:
            - 3000:3000
        logging:
            options:
                max-size: "100m"
                max-file: "5"
        
    nginx:
        restart: always
        image: nginx:latest
        hostname: nginx
        networks:
          - default
        ports:
            - 8080:8080
        volumes:
            - ./nginx.conf:/etc/nginx1/nginx.conf:ro
            - ./wirecloud-static:/var/www/static:ro
        depends_on:
            - wirecloud


    postgres:
        restart: always
        image: postgres:latest
        hostname: postgres
        networks:
          - default
        environment:
            - POSTGRES_PASSWORD=wirepass   # Change this password!
        volumes:
            - ./postgres-data:/var/lib/postgresql/data


    elasticsearch:
        restart: always
        image: elasticsearch:2.4
        hostname: elasticsearch
        networks:
          - default
        volumes:
            - ./elasticsearch-data:/usr/share/elasticsearch/data
        command: elasticsearch -Des.index.max_result_window=50000


    memcached:
        restart: always
        image: memcached:1
        hostname: memcached
        networks:
          - default
        command: memcached -m 2048m


    wirecloud:
        restart: always
        image: fiware/wirecloud:1.2
        hostname: wirecloud
        networks:
          - default
        depends_on:
            - postgres
            - elasticsearch
            - memcached
        environment:
            - DEBUG=False
            - LOGLEVEL=INFO
            # - DEFAULT_THEME=wirecloud.defaulttheme
            - DB_HOST=postgres
            - DB_PASSWORD=wirepass   # Change this password!
            - FORWARDED_ALLOW_IPS=*
            - ELASTICSEARCH2_URL=http://elasticsearch:9200/
            - MEMCACHED_LOCATION=memcached:11211
            # Uncomment the following environment variables to enable IDM integration
            #- FIWARE_IDM_SERVER=${FIWARE_IDM_SERVER}
            #- SOCIAL_AUTH_FIWARE_KEY=${SOCIAL_AUTH_FIWARE_KEY}
            #- SOCIAL_AUTH_FIWARE_SECRET=${SOCIAL_AUTH_FIWARE_SECRET}
        volumes:
            - ./wirecloud-data:/opt/wirecloud_instance/data
            - ./wirecloud-static:/var/www/static

## For perseo :- perseo-core, perseo-fe is required
    perseo-core:
        image: fiware/perseo-core
        hostname: perseo-core
        environment:
            - PERSEO_FE_URL=http://perseo-fe:9090
            - MAX_AGE=6000
        networks:
            - default
        depends_on:
            - mongo-db
        expose:
            - "8010"
        ports:
            - "8080:8080"
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure

    perseo-fe:
        image: fiware/perseo
        hostname: perseo-fe
        networks:
            - default
        ports:
            - 9090:9090
        depends_on:
            - perseo-core
        environment:
            - PERSEO_MONGO_ENDPOINT=mongo-db
            - PERSEO_CORE_URL=http://perseo-core:8080
            - PERSEO_LOG_LEVEL=debug
            - PERSEO_ORION_URL=http://orion:1026/
            - PERSEO_SMTP_HOST=www.gmail.com
            - PERSEO_SMTP_PORT=25
            - PERSEO_SMTP_SECURE=false
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure

    # Draco is configured to write context data to Mongo-DB
    draco:
        image: ging/fiware-draco:1.1.0
        hostname: draco
        container_name: fiware-draco
        networks:
          - default
        environment:
          - NIFI_WEB_HTTP_PORT=9050
        expose:
          - "5050"
          - "9050"
        ports:
          - "9050:9050"
          - "5050:5050"
        healthcheck:
          test: curl --fail -s http://draco:9050/nifi-api/system-diagnostics || exit 1
          #start_period: 1m
            
            
networks:
  default:
    ipam:
      config:
        - subnet: 192.168.0.1/24

volumes:
  mongo-db: ~
  postgres-data: ~
